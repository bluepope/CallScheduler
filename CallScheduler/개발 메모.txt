[WPF의 Window? Page?]
WPF에서 화면을 만들 때 Window 형식이나 Page 형식, 둘 중 하나를 선택할 수 있다.
Window형식은 WPF에서 일반적인 화면이다.
Page는 Window와 다른데, Frame 컨트롤이나 NavigationWindow 에서 호스팅 되어야 한다.
Page로 화면을 생성하면, 새로고침/뒤로가기/앞으로가기 버튼이 생성되어 기능을 이용할 수 있다.
뒤로가기와 앞으로가기 버튼을 클릭하면 해당 Page는 소멸자가 호출되서 해제된다.
이 때 Memory leak을 방지하기 위해 DataContext = null을 해야한다.
MVVM을 사용하는 WPF 어플리케이션이라면 데이터는 뷰모델에 모두 저장되어 있기 때문에 소멸되더라도 뒤로가기, 앞으로가기 버튼을 이용해 화면을 전환하면 랜더링만 다시 해주면 된다.
따라서 WPF는 MVVM이 필수여야 한다.

[WPF에서 MVVM을 사용해야하는 이유]
- WPF에서 MVVM을 사용하지 않고 화면끼리 따로 노는 경우 화면을 컨트롤해주는 옵저버 객체를 이용하여 수동으로 구현해줘야한다.

[WPF 개발 Tip]
- WPF에서 Xaml Binding이 실패하면 F5누르고 Debugging 모드로 실행하면 출력메세지에 System.Window.Data Exception으로 Binding Fail 을 알려준다. 바인딩을 올바르게 한 것 같은데 동작하지 않는다면 출력메세지를 확인한다.

[.NET Thread Pool의 특징 (MSDN 발췌)]
- 프로세스 1개 당 1개의 ThreadPool만 존재한다.
- Thread Pool의 Thread가 Task를 완료하면, 대기 중인 Thread Queue로 반환되어 유휴스레드가 된다.
- 이후 CLR에서 유휴스레드를 다른 작업에 할당하여 사용한다. 이런 방식으로 .NET은 Thread를 생성하고 소멸시키는데 사용되는 비용을 방지한다.

[.NET Thread Pool을 사용하지 않는 신규 Thread를 생성하고 사용해야하는 경우 (MSDN 발췌)]
- Foreground Thread가 필요한 경우.
- Thread가 우선순위를 가져야하는 경우.
- Thread Pool의 최대 Thread 개수를 넘어가는 Thread가 필요한 경우 (최대 count를 넘어가면 Block이 걸린다.)
- Thread와 연결된 1:1로 연결된 '안정적인' 객체가 있는 경우

[Task]
<Task.Run으로 비동기 메소드를 처리하는 것과, Task.Factory.StartNew로 비동기 메소드를 처리하는 것에는 어떤 차이가 있는가?>
<참조 : https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/>
- Task.Factory.StartNew는 닷넷 프레임워크 4.0에서 처음 출시되었다. 비동기로 메소드를 처리하기 위한 방법인데, 기본적인 사용방법은 아래와 같다.

Task.Factory.StartNew(Action 또는 Func 델리게이트, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);

위 코드와 완벽하게 동일한 내용으로 간단하게 쓸 수 있는 방법이 닷넷 프레임워크 4.5 Preview에서 공개되었다. 아래와 같다.

Task.Run(Action 또는 Func 델리게이트);

두 방식 모두 Thread Pool에서 Thread를 할당받는다. 따라서 일반적인 경우 Task.Run을 사용하여 코드가독성을 높이는 것이 맞다.
그럼 Task.Run이 코드가 짧으니 Task.Factory.StartNew는 필요없는가?
그것은 아니고, TaskCreationOptions을 제어하는 경우는 Task.Facotry.StartNew를 사용해야 한다. 보는 바와 같이 Task.Run은 TaskCreationOptions을 지원하는 메소드 파라미터가 없다.
또한 TaskScheduler를 제어하는 경우에도 사용해야 한다.